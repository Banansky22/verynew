import os
import logging
import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import pandas as pd
import io
import numpy as np
from datetime import datetime
import re
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')

if not TELEGRAM_BOT_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
print("üöÄ –ë–£–•–ì–ê–õ–¢–ï–†–°–ö–ò–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ó–ê–ü–£–©–ï–ù...")

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
os.makedirs("temp_files", exist_ok=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECT_ANALYSIS, SELECT_INDICATORS, SELECT_INDUSTRY = range(3)

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–∞—Ç–µ–π
BALANCE_ITEMS = {
    # –ê–ö–¢–ò–í–´
    '–≤–Ω–µ–æ–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã': ['–≤–Ω–µ–æ–±–æ—Ä–æ—Ç–Ω—ã–µ', 'non-current', '–æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', '–Ω–µ–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ', '–Ω–º–∞'],
    '–æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞': ['–æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'fixed assets', 'property plant', '–æ—Å–Ω–æ–≤–Ω–æ–π', '–æ—Å—è'],
    '–Ω–µ–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã': ['–Ω–µ–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ', 'intangible', '–Ω–º–∞'],
    '–∑–∞–ø–∞—Å—ã': ['–∑–∞–ø–∞—Å—ã', 'inventories', 'inventory', '—Ç–æ–≤–∞—Ä–Ω–æ-–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ', '—Ç–º—Ü'],
    '–¥–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å': ['–¥–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è', 'accounts receivable', 'receivables', '–¥–µ–±–∏—Ç–æ—Ä'],
    '–¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞': ['–¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'cash', 'cash and equivalents', '–¥–µ–Ω—å–≥–∏', '–∫–∞—Å—Å–∞', '—Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç'],
    '–æ–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã': ['–æ–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã', 'current assets', '–æ–±–æ—Ä–æ—Ç–Ω—ã–µ'],
    '–∞–∫—Ç–∏–≤—ã –≤—Å–µ–≥–æ': ['–∞–∫—Ç–∏–≤—ã', '–∞–∫—Ç–∏–≤ –≤—Å–µ–≥–æ', 'total assets', '–∏—Ç–æ–≥–æ –∞–∫—Ç–∏–≤—ã', '–±–∞–ª–∞–Ω—Å –∞–∫—Ç–∏–≤'],
    
    # –ü–ê–°–°–ò–í–´
    '–∫–∞–ø–∏—Ç–∞–ª': ['–∫–∞–ø–∏—Ç–∞–ª', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª', 'equity', 'share capital', '—É—Å—Ç–∞–≤–Ω—ã–π'],
    '—É—Å—Ç–∞–≤–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª': ['—É—Å—Ç–∞–≤–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª', 'authorized capital', '—É—Å—Ç–∞–≤–Ω–æ–π'],
    '–Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å': ['–Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å', 'retained earnings', '–ø—Ä–∏–±—ã–ª—å –æ—Ç—á–µ—Ç–Ω–æ–≥–æ –≥–æ–¥–∞'],
    '–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞': ['–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞', 'long-term liabilities', '–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ'],
    '–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞': ['–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞', 'short-term liabilities', 'current liabilities', '–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ'],
    '–∫—Ä–µ–¥–∏—Ç—ã –∑–∞–π–º—ã': ['–∫—Ä–µ–¥–∏—Ç—ã', '–∑–∞–π–º—ã', 'loans', 'borrowings', '–∫—Ä–µ–¥–∏—Ç'],
    '–∫—Ä–µ–¥–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å': ['–∫—Ä–µ–¥–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å', 'accounts payable', '–∫—Ä–µ–¥–∏—Ç–æ—Ä—Å–∫–∞—è'],
    '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—Å–µ–≥–æ': ['–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞', '–ø–∞—Å—Å–∏–≤ –≤—Å–µ–≥–æ', 'total liabilities', '–∏—Ç–æ–≥–æ –ø–∞—Å—Å–∏–≤—ã', '–±–∞–ª–∞–Ω—Å –ø–∞—Å—Å–∏–≤'],
    
    # –û–§–†
    '–≤—ã—Ä—É—á–∫–∞': ['–≤—ã—Ä—É—á–∫–∞', 'revenue', 'sales', '–¥–æ—Ö–æ–¥', '–æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'],
    '—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å': ['—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å', 'cost of sales', 'cost', '—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂'],
    '–≤–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å': ['–≤–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å', '—É–±—ã—Ç–æ–∫', 'gross profit', '–ø—Ä–∏–±—ã–ª—å –≤–∞–ª–æ–≤–∞—è'],
    '–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã': ['–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã', 'operating expenses', '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', '—É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã'],
    '–ø—Ä–∏–±—ã–ª—å –¥–æ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è': ['–ø—Ä–∏–±—ã–ª—å –¥–æ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è', 'profit before tax', '–ø—Ä–∏–±—ã–ª—å –¥–æ –Ω–∞–ª–æ–≥–∞'],
    '—á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å': ['—á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', 'net profit', 'net income', '–ø—Ä–∏–±—ã–ª—å —á–∏—Å—Ç–∞—è']
}

# –û—Ç—Ä–∞—Å–ª–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã
INDUSTRY_STANDARDS = {
    'retail': {
        'name': '–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è',
        'standards': {
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏': (1.2, 2.0),
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏': (0.2, 0.5),
            '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ (ROS)': (3.0, 8.0),
            '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ (ROA)': (5.0, 12.0),
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–≤—Ç–æ–Ω–æ–º–∏–∏': (0.3, 0.6),
            '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤': (1.5, 3.0)
        }
    },
    'manufacturing': {
        'name': '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
        'standards': {
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏': (1.5, 2.5),
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏': (0.1, 0.3),
            '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ (ROS)': (8.0, 15.0),
            '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ (ROA)': (6.0, 14.0),
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–≤—Ç–æ–Ω–æ–º–∏–∏': (0.4, 0.7),
            '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤': (0.8, 1.5)
        }
    },
    'services': {
        'name': '–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥',
        'standards': {
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏': (1.0, 1.8),
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏': (0.3, 0.6),
            '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ (ROS)': (10.0, 20.0),
            '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ (ROA)': (8.0, 18.0),
            '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–≤—Ç–æ–Ω–æ–º–∏–∏': (0.4, 0.7),
            '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤': (1.0, 2.5)
        }
    }
}

# –ì—Ä—É–ø–ø—ã –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
INDICATOR_GROUPS = {
    '–í—ã—Ä—É—á–∫–∞ –∏ –ø—Ä–∏–±—ã–ª—å': ['–≤—ã—Ä—É—á–∫–∞', '—á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', '–≤–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å', '–ø—Ä–∏–±—ã–ª—å –¥–æ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è'],
    '–ê–∫—Ç–∏–≤—ã –∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞': ['–∞–∫—Ç–∏–≤—ã –≤—Å–µ–≥–æ', '–æ–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã', '–≤–Ω–µ–æ–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã', '–∫–∞–ø–∏—Ç–∞–ª', '–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞'],
    '–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å': ['–¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', '–¥–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å', '–∑–∞–ø–∞—Å—ã'],
    '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å': ['–≤—ã—Ä—É—á–∫–∞', '—á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', '–∞–∫—Ç–∏–≤—ã –≤—Å–µ–≥–æ', '–∫–∞–ø–∏—Ç–∞–ª'],
    '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å': ['–∫–∞–ø–∏—Ç–∞–ª', '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—Å–µ–≥–æ', '–∞–∫—Ç–∏–≤—ã –≤—Å–µ–≥–æ'],
    '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å': ['–≤—ã—Ä—É—á–∫–∞', '–∑–∞–ø–∞—Å—ã', '–¥–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å', '–∞–∫—Ç–∏–≤—ã –≤—Å–µ–≥–æ']
}

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def save_uploaded_file(file_bytes, user_id, file_name):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    try:
        user_dir = f"temp_files/user_{user_id}"
        os.makedirs(user_dir, exist_ok=True)
        
        file_path = os.path.join(user_dir, file_name)
        with open(file_path, 'wb') as f:
            f.write(file_bytes)
        
        return file_path
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return None

def save_user_data(user_id, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª"""
    try:
        user_dir = f"temp_files/user_{user_id}"
        os.makedirs(user_dir, exist_ok=True)
        
        data_file = os.path.join(user_dir, 'user_data.json')
        with open(data_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def load_user_data_with_fallback(context, user_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ —Ñ–∞–π–ª–æ–≤–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        if 'periods_data' in context.user_data and context.user_data['periods_data']:
            return True
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
        user_dir = f"temp_files/user_{user_id}"
        data_file = os.path.join(user_dir, 'user_data.json')
        
        if os.path.exists(data_file):
            with open(data_file, 'r', encoding='utf-8') as f:
                user_data = json.load(f)
                context.user_data.update(user_data)
            return True
        
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def template_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"""
    template = """
üìã **–®–ê–ë–õ–û–ù –û–¢–ß–ï–¢–ù–û–°–¢–ò –° –ü–ï–†–ò–û–î–ê–ú–ò:**

| –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è | 31.12.2022 | 31.12.2023 | 31.12.2024 |
|-------------------------|------------|------------|------------|
| –í—ã—Ä—É—á–∫–∞                 | 800,000    | 1,000,000  | 1,200,000  |
| –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å          | 150,000    | 200,000    | 250,000    |
| –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞       | 450,000    | 500,000    | 550,000    |
| –ó–∞–ø–∞—Å—ã                  | 120,000    | 150,000    | 180,000    |
| –î–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å | 80,000   | 100,000    | 120,000    |
| –î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞       | 40,000     | 50,000     | 60,000     |
| –ò—Ç–æ–≥–æ –∞–∫—Ç–∏–≤—ã            | 750,000    | 800,000    | 850,000    |
| –£—Å—Ç–∞–≤–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª        | 300,000    | 300,000    | 300,000    |
| –ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å | 120,000   | 200,000    | 250,000    |
| –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ | 330,000 | 300,000 | 300,000 |

üí° **–ë–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç**
"""
    await update.message.reply_text(template)

async def sample_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    sample_data = {
        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è': [
            '–í—ã—Ä—É—á–∫–∞', 
            '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', 
            '–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', 
            '–ó–∞–ø–∞—Å—ã',
            '–î–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å', 
            '–î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', 
            '–ò—Ç–æ–≥–æ –∞–∫—Ç–∏–≤—ã',
            '–£—Å—Ç–∞–≤–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª', 
            '–ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å', 
            '–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞'
        ],
        '31.12.2022': [800000, 150000, 450000, 120000, 80000, 40000, 750000, 
                       300000, 120000, 330000],
        '31.12.2023': [1000000, 200000, 500000, 150000, 100000, 50000, 800000,
                       300000, 200000, 300000],
        '31.12.2024': [1200000, 250000, 550000, 180000, 120000, 60000, 850000,
                       300000, 250000, 300000]
    }
    
    df = pd.DataFrame(sample_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    buffer = io.BytesIO()
    with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º', index=False)
    
    buffer.seek(0)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await update.message.reply_document(
        document=buffer,
        filename='–ø—Ä–∏–º–µ—Ä_–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏_—Å_–ø–µ—Ä–∏–æ–¥–∞–º–∏.xlsx',
        caption='üìã –í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏–∫–∏!'
    )
    
# === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞"""
    user_id = update.message.from_user.id
    context.user_data.clear()
    
    keyboard = [
        [KeyboardButton("üìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"), KeyboardButton("üéØ –í—ã–±–æ—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑")],
        [KeyboardButton("üìà –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"), KeyboardButton("üíé –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏")],
        [KeyboardButton("üèõÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"), KeyboardButton("üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏")],
        [KeyboardButton("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π"), KeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    await update.message.reply_text(
        f"ü§ñ **–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–†!**\n\n"
        f"üìä **–°—Ç–∞—Ç—É—Å:** üìÅ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞\n\n"
        f"üéØ **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:**\n\n"
        "‚Ä¢ üìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Å–µ—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ üéØ –í—ã–±–æ—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –≤–∞–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n"
        "‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ - –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "‚Ä¢ üíé –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞\n"
        "‚Ä¢ üèõÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å - —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Ä–∏—Å–∫–∏\n"
        "‚Ä¢ üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏ - –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ benchmarks\n"
        "‚Ä¢ üîÆ –ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π - —Ç—Ä–µ–Ω–¥—ã –Ω–∞ –±—É–¥—É—â–µ–µ\n"
        "‚Ä¢ üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT - –æ—Ç—á–µ—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n\n"
        "üìÅ **–ù–∞—á–Ω–∏—Ç–µ —Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑**",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üí° **–†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ü–ï–†–ò–û–î–ê–ú**

üéØ **–ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:**
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –í—ã–±–æ—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω—É–∂–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º–∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ TXT

üìä **–¢–ò–ü–´ –ê–ù–ê–õ–ò–ó–ê:**
‚Ä¢ üìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
‚Ä¢ üéØ –í—ã–±–æ—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
‚Ä¢ üìà –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
‚Ä¢ üíé –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ üèõÔ∏è –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å - —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ - –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ benchmarks
‚Ä¢ üîÆ –ü—Ä–æ–≥–Ω–æ–∑ - –±—É–¥—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã
‚Ä¢ üìÑ TXT - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç

üìÅ **–§–û–†–ú–ê–¢ –§–ê–ô–õ–ê:**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å —Å—Ç–æ–ª–±—Ü–∞–º–∏ –ø–µ—Ä–∏–æ–¥–æ–≤:
‚Ä¢ 31.12.2023, 31.12.2022
‚Ä¢ –ù–∞ 31 –¥–µ–∫–∞–±—Ä—è 2023
‚Ä¢ –ó–∞ 2023 –≥–æ–¥, –ó–∞ 2022 –≥–æ–¥
"""
    await update.message.reply_text(help_text)

async def receive_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–æ–≤"""
    try:
        if not update.message.document:
            await update.message.reply_text("üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é")
            return

        file = update.message.document
        file_name = file.file_name.lower()

        if not (file_name.endswith('.xlsx') or file_name.endswith('.xls')):
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls)")
            return

        await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞...")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_obj = await file.get_file()
        file_bytes = await file_obj.download_as_bytearray()

        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        try:
            df = read_excel_file(file_bytes, file_name)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã
        periods = detect_periods(df)
        
        if not periods:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥—ã –≤ —Ñ–∞–π–ª–µ")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        periods_data = extract_financial_data_by_period(df, periods)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.update({
            'periods_data': periods_data,
            'file_name': file_name,
            'loaded_at': datetime.now().isoformat()
        })
        
        extracted_count = sum(len(data) for data in periods_data.values())
        await update.message.reply_text(
            f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n"
            f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {extracted_count}\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥–æ–≤: {len(periods)}\n\n"
            f"üéØ **–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:**"
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ receive_document: {e}")

# === –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–ó–ê –î–ê–ù–ù–´–• ===

def read_excel_file(file_bytes, file_name):
    """–ß–∏—Ç–∞–µ—Ç Excel —Ñ–∞–π–ª —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    try:
        if file_name.endswith('.xls'):
            return pd.read_excel(io.BytesIO(file_bytes), engine='xlrd')
        else:
            return pd.read_excel(io.BytesIO(file_bytes), engine='openpyxl')
    except Exception as e:
        try:
            return pd.read_excel(io.BytesIO(file_bytes))
        except Exception as e2:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {str(e2)}")

def detect_periods(df):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥—ã –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö DataFrame —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
    periods = []
    
    for col in df.columns:
        col_str = str(col).lower().strip()
        
        # –ü–æ–∏—Å–∫ –¥–∞—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        date_patterns = [
            r'\d{2}.\d{2}.\d{4}',  # 31.12.2023
            r'\d{4}-\d{2}-\d{2}',   # 2023-12-31
            r'\d{2}/\d{2}/\d{4}',   # 31/12/2023
            r'\d{4}.\d{2}.\d{2}',   # 2023.12.31
        ]
        
        for pattern in date_patterns:
            matches = re.findall(pattern, col_str)
            if matches:
                try:
                    date_str = matches[0]
                    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
                    if '.' in date_str and len(date_str.split('.')[0]) == 2:
                        date_obj = datetime.strptime(date_str, '%d.%m.%Y')
                    elif '-' in date_str:
                        date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                    elif '/' in date_str:
                        date_obj = datetime.strptime(date_str, '%d/%m/%Y')
                    else:
                        date_obj = datetime.strptime(date_str, '%Y.%m.%d')
                    
                    periods.append({
                        'column': col,
                        'date': date_obj,
                        'date_str': date_str,
                        'formatted': date_obj.strftime('%d.%m.%Y'),
                        'year': date_obj.year
                    })
                    break
                except:
                    continue
        
        # –ü–æ–∏—Å–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        period_keywords = {
            '–Ω–∞ 31.12': '31.12',
            '–Ω–∞ 31.03': '31.03', 
            '–Ω–∞ 30.06': '30.06',
            '–Ω–∞ 30.09': '30.09',
            '–∑–∞ 2024': '2024',
            '–∑–∞ 2023': '2023',
            '–∑–∞ 2022': '2022',
            '1 –∫–≤–∞—Ä—Ç–∞–ª': 'Q1',
            '2 –∫–≤–∞—Ä—Ç–∞–ª': 'Q2',
            '3 –∫–≤–∞—Ä—Ç–∞–ª': 'Q3',
            '4 –∫–≤–∞—Ä—Ç–∞–ª': 'Q4'
        }
        
        for keyword, period in period_keywords.items():
            if keyword in col_str:
                year = 2024 if '2024' in col_str else 2023 if '2023' in col_str else 2022
                periods.append({
                    'column': col,
                    'date': datetime(year, 12, 31),
                    'date_str': period,
                    'formatted': f"{period}.{year}",
                    'year': year
                })
                break
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –≥–æ–¥—É (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
    periods.sort(key=lambda x: x['year'])
    
    return periods

def find_balance_item(column_name, df_columns):
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Å—Ç–∞—Ç—å—è–º –±–∞–ª–∞–Ω—Å–∞"""
    column_name = str(column_name).lower().strip()
    
    # –£–±–∏—Ä–∞–µ–º —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
    cleaned_name = re.sub(r'^[ivx]+\.?\s*', '', column_name).strip()
    
    for item, keywords in BALANCE_ITEMS.items():
        for keyword in keywords:
            if keyword in cleaned_name:
                return item
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    if '–≤–Ω–µ–æ–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã' in column_name:
        return '–≤–Ω–µ–æ–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã'
    elif '–Ω–µ–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã' in column_name:
        return '–Ω–µ–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã'
    elif '–æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞' in column_name:
        return '–æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞'
    elif '–∑–∞–ø–∞—Å—ã' in column_name:
        return '–∑–∞–ø–∞—Å—ã'
    elif '–¥–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è' in column_name:
        return '–¥–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å'
    elif '–¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞' in column_name:
        return '–¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞'
    elif '–æ–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã' in column_name:
        return '–æ–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã'
    elif '–∞–∫—Ç–∏–≤' == cleaned_name or '–∞–∫—Ç–∏–≤—ã' in cleaned_name:
        return '–∞–∫—Ç–∏–≤—ã –≤—Å–µ–≥–æ'
    elif '–∫–∞–ø–∏—Ç–∞–ª' in column_name:
        return '–∫–∞–ø–∏—Ç–∞–ª'
    elif '—É—Å—Ç–∞–≤–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª' in column_name:
        return '—É—Å—Ç–∞–≤–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª'
    elif '–Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è' in column_name:
        return '–Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å'
    elif '–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ' in column_name and '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞' in column_name:
        return '–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞'
    elif '–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ' in column_name and '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞' in column_name:
        return '–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞'
    elif '–∫—Ä–µ–¥–∏—Ç–æ—Ä—Å–∫–∞—è' in column_name:
        return '–∫—Ä–µ–¥–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å'
    elif '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞' == cleaned_name:
        return '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—Å–µ–≥–æ'
    elif '–≤—ã—Ä—É—á–∫–∞' in column_name:
        return '–≤—ã—Ä—É—á–∫–∞'
    elif '–ø—Ä–∏–±—ã–ª—å' in column_name and '–≤–∞–ª–æ–≤–∞—è' in column_name:
        return '–≤–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å'
    elif '–ø—Ä–∏–±—ã–ª—å' in column_name and '—á–∏—Å—Ç–∞—è' in column_name:
        return '—á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å'
    elif '–ø—Ä–∏–±—ã–ª—å' in column_name and '–Ω–∞–ª–æ–≥' in column_name:
        return '–ø—Ä–∏–±—ã–ª—å –¥–æ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è'
    
    return None

def extract_financial_data_by_period(df, periods):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å —Å—Ç–æ–ª–±—Ü–æ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π"""
    financial_data = {}
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(periods)} –ø–µ—Ä–∏–æ–¥–æ–≤:")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    for period in periods:
        financial_data[period['formatted']] = {}
    
    # –ò—â–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    indicator_column = None
    for col in df.columns:
        if '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in str(col).lower() or '–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å' in str(col).lower():
            indicator_column = col
            break
    
    if not indicator_column:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
        return financial_data
    
    print(f"üìã –°—Ç–æ–ª–±–µ—Ü —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏: '{indicator_column}'")
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    for row_idx in range(len(df)):
        indicator_name = str(df[indicator_column].iloc[row_idx]).strip()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if not indicator_name or indicator_name in ['–ê–∫—Ç–∏–≤', '–ü–∞—Å—Å–∏–≤', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è']:
            continue
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
        item = find_balance_item(indicator_name, [indicator_name])
        
        if item:
            print(f"   üìä –ù–∞–π–¥–µ–Ω –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: '{indicator_name}' ‚Üí {item}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            for period in periods:
                period_key = period['formatted']
                col_name = period['column']
                
                try:
                    value = pd.to_numeric(df[col_name].iloc[row_idx], errors='coerce')
                    if not pd.isna(value) and value != 0:
                        financial_data[period_key][item] = value
                        print(f"      {period_key}: {value:,.0f}")
                except Exception as e:
                    print(f"      –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è {period_key}: {e}")
    
    return financial_data

def calculate_financial_ratios_for_period(data):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    ratios = {}
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        assets = data.get('–∞–∫—Ç–∏–≤—ã –≤—Å–µ–≥–æ', 0)
        current_assets = data.get('–æ–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã', 0)
        cash = data.get('–¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', 0)
        receivables = data.get('–¥–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å', 0)
        inventory = data.get('–∑–∞–ø–∞—Å—ã', 0)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±–æ—Ä–æ—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤, –Ω–æ –µ—Å—Ç—å –∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
        if current_assets == 0:
            current_assets = cash + receivables + inventory
        
        equity = data.get('–∫–∞–ø–∏—Ç–∞–ª', 0)
        current_liabilities = data.get('–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞', 0)
        total_liabilities = data.get('–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—Å–µ–≥–æ', 0)
        
        revenue = data.get('–≤—ã—Ä—É—á–∫–∞', 0)
        net_profit = data.get('—á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', 0)
        gross_profit = data.get('–≤–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å', 0)
        
        # 1. –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´ –õ–ò–ö–í–ò–î–ù–û–°–¢–ò
        if current_liabilities > 0:
            ratios['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏'] = current_assets / current_liabilities
            ratios['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏'] = cash / current_liabilities
            if cash + receivables > 0:
                ratios['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ä–æ—á–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏'] = (cash + receivables) / current_liabilities
        
        # 2. –†–ï–ù–¢–ê–ë–ï–õ–¨–ù–û–°–¢–¨
        if assets > 0:
            ratios['–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ (ROA)'] = (net_profit / assets) * 100
        if equity > 0:
            ratios['–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–ø–∏—Ç–∞–ª–∞ (ROE)'] = (net_profit / equity) * 100
        if revenue > 0:
            ratios['–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ (ROS)'] = (net_profit / revenue) * 100
            if gross_profit > 0:
                ratios['–í–∞–ª–æ–≤–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å'] = (gross_profit / revenue) * 100
        
        # 3. –§–ò–ù–ê–ù–°–û–í–ê–Ø –£–°–¢–û–ô–ß–ò–í–û–°–¢–¨
        if assets > 0:
            ratios['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–≤—Ç–æ–Ω–æ–º–∏–∏'] = equity / assets
            if equity > 0:
                ratios['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ª–µ–≤–µ—Ä–∏–¥–∂–∞'] = total_liabilities / equity
        
        # 4. –î–ï–õ–û–í–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨
        if assets > 0:
            ratios['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤'] = revenue / assets
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
    
    return ratios

# === –§–£–ù–ö–¶–ò–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–ß–ï–¢–û–í ===

def generate_period_analysis_report(periods_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º"""
    if not periods_data or all(len(data) == 0 for data in periods_data.values()):
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º."
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    periods_ratios = {}
    for period, data in periods_data.items():
        if data:
            periods_ratios[period] = calculate_financial_ratios_for_period(data)
    
    report = "üìä **–§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ü–ï–†–ò–û–î–ê–ú**\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    report += "üí∞ **–î–ò–ù–ê–ú–ò–ö–ê –û–°–ù–û–í–ù–´–• –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô:**\n\n"
    
    key_indicators = ['–≤—ã—Ä—É—á–∫–∞', '—á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', '–∞–∫—Ç–∏–≤—ã –≤—Å–µ–≥–æ', '–∫–∞–ø–∏—Ç–∞–ª', '–æ–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã', '–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞']
    
    for indicator in key_indicators:
        values = []
        for period, data in periods_data.items():
            if data and indicator in data:
                values.append((period, data[indicator]))
        
        if values:
            report += f"üìà **{indicator.title()}:**\n"
            for period, value in values:
                report += f"‚Ä¢ {period}: {value:,.0f} —Ä—É–±.\n"
            
            # –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏
            if len(values) >= 2:
                first_period, first_val = values[0]
                last_period, last_val = values[-1]
                change_abs = last_val - first_val
                change_rel = ((last_val - first_val) / first_val * 100) if first_val != 0 else 0
                trend = "üìà" if change_rel > 0 else "üìâ" if change_rel < 0 else "‚û°Ô∏è"
                report += f"  {trend} –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥: {change_abs:+,.0f} —Ä—É–±. ({change_rel:+.1f}%)\n"
            
            report += "\n"
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    if any(periods_ratios.values()):
        report += "üìä **–î–ò–ù–ê–ú–ò–ö–ê –§–ò–ù–ê–ù–°–û–í–´–• –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í:**\n\n"
        
        ratio_categories = {
            'üíß **–õ–ò–ö–í–ò–î–ù–û–°–¢–¨:**': ['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏', '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏'],
            'üéØ **–†–ï–ù–¢–ê–ë–ï–õ–¨–ù–û–°–¢–¨:**': ['–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ (ROA)', '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–ø–∏—Ç–∞–ª–∞ (ROE)', '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ (ROS)'],
            'üèõÔ∏è **–§–ò–ù–ê–ù–°–û–í–ê–Ø –£–°–¢–û–ô–ß–ò–í–û–°–¢–¨:**': ['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–≤—Ç–æ–Ω–æ–º–∏–∏', '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ª–µ–≤–µ—Ä–∏–¥–∂–∞'],
            'üìà **–î–ï–õ–û–í–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨:**': ['–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤']
        }
        
        for category, ratios_list in ratio_categories.items():
            report += f"{category}\n"
            
            category_has_data = False
            for ratio_name in ratios_list:
                if any(ratio_name in ratios for ratios in periods_ratios.values()):
                    category_has_data = True
                    break
            
            if not category_has_data:
                report += "‚Ä¢ ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞\n\n"
                continue
            
            for ratio_name in ratios_list:
                ratio_values = []
                for period, ratios in periods_ratios.items():
                    if ratio_name in ratios:
                        ratio_values.append((period, ratios[ratio_name]))
                
                if ratio_values:
                    report += f"‚Ä¢ {ratio_name}:\n"
                    for period, value in ratio_values:
                        if '—Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å' in ratio_name.lower():
                            report += f"  {period}: {value:.1f}%\n"
                        else:
                            report += f"  {period}: {value:.2f}\n"
                    
                       # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
                    if len(ratio_values) >= 2:
                        first_val = ratio_values[0][1]
                        last_val = ratio_values[-1][1]
                        change = last_val - first_val
                        
                        if '–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏' in ratio_name:
                            if change > 0.1:
                                report += f"  üìà –£–ª—É—á—à–µ–Ω–∏–µ +{change:.2f}\n"
                            elif change < -0.1:
                                report += f"  üìâ –£—Ö—É–¥—à–µ–Ω–∏–µ {change:.2f}\n"
                        
                        elif '—Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å' in ratio_name.lower():
                            if change > 1:
                                report += f"  üìà –†–æ—Å—Ç +{change:.1f}–ø.–ø.\n"
                            elif change < -1:
                                report += f"  üìâ –°–ø–∞–¥ {change:.1f}–ø.–ø.\n"
            
            report += "\n"
    else:
        report += "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã**\n\n"
    
    # –°–≤–æ–¥–Ω—ã–µ –≤—ã–≤–æ–¥—ã
    report += "üí° **–û–ë–©–ò–ï –í–´–í–û–î–´:**\n\n"
    
    # –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –≤—ã—Ä—É—á–∫–∏
    revenue_data = []
    for period, data in periods_data.items():
        if data and '–≤—ã—Ä—É—á–∫–∞' in data:
            revenue_data.append(data['–≤—ã—Ä—É—á–∫–∞'])
    
    if len(revenue_data) >= 2:
        revenue_growth = ((revenue_data[-1] - revenue_data[0]) / revenue_data[0] * 100) if revenue_data[0] != 0 else 0
        if revenue_growth > 15:
            report += "‚Ä¢ üöÄ –í—ã—Å–æ–∫–∏–π —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏\n"
        elif revenue_growth > 5:
            report += "‚Ä¢ üìà –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç –±–∏–∑–Ω–µ—Å–∞\n"
        elif revenue_growth > 0:
            report += "‚Ä¢ ‚ö†Ô∏è –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç\n"
        else:
            report += "‚Ä¢ ‚ùå –°–Ω–∏–∂–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏\n"
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
    last_period = list(periods_ratios.keys())[-1] if periods_ratios else None
    if last_period and last_period in periods_ratios:
        last_ratios = periods_ratios[last_period]
        if '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ (ROA)' in last_ratios:
            roa = last_ratios['–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ (ROA)']
            if roa > 10:
                report += "‚Ä¢ üíé –í—ã—Å–æ–∫–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å\n"
            elif roa > 5:
                report += "‚Ä¢ ‚úÖ –°—Ä–µ–¥–Ω—è—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å\n"
            else:
                report += "‚Ä¢ üî¥ –ù–∏–∑–∫–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    report += "\nüí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**\n"
    report += "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π\n"
    report += "‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Å –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º–∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏\n"
    report += "‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–ª–∞–±—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π\n"
    
    return report

def generate_liquidity_analysis_report(periods_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
    report = "üíß **–ê–ù–ê–õ–ò–ó –õ–ò–ö–í–ò–î–ù–û–°–¢–ò**\n\n"
    
    periods_ratios = {}
    for period, data in periods_data.items():
        if data:
            periods_ratios[period] = calculate_financial_ratios_for_period(data)
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    liquidity_ratios = ['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏', '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏', '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ä–æ—á–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏']
    
    for ratio_name in liquidity_ratios:
        ratio_values = []
        for period, ratios in periods_ratios.items():
            if ratio_name in ratios:
                ratio_values.append((period, ratios[ratio_name]))
        
        if ratio_values:
            report += f"**{ratio_name}:**\n"
            for period, value in ratio_values:
                report += f"‚Ä¢ {period}: {value:.2f}\n"
                
                # –û—Ü–µ–Ω–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è
                if ratio_name == '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏':
                    if value >= 2.0:
                        report += "  ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å\n"
                    elif value >= 1.5:
                        report += "  ‚ö†Ô∏è –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å\n"
                    elif value >= 1.0:
                        report += "  üü° –ü–æ–Ω–∏–∂–µ–Ω–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å\n"
                    else:
                        report += "  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å\n"
                
                elif ratio_name == '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏':
                    if value >= 0.2:
                        report += "  ‚úÖ –•–æ—Ä–æ—à–∞—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å\n"
                    else:
                        report += "  ‚ö†Ô∏è –ù–∏–∑–∫–∞—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å\n"
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
            if len(ratio_values) >= 2:
                first_val = ratio_values[0][1]
                last_val = ratio_values[-1][1]
                change = last_val - first_val
                if change > 0.1:
                    report += f"  üìà –£–ª—É—á—à–µ–Ω–∏–µ +{change:.2f}\n"
                elif change < -0.1:
                    report += f"  üìâ –£—Ö—É–¥—à–µ–Ω–∏–µ {change:.2f}\n"
            
            report += "\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    report += "üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –õ–ò–ö–í–ò–î–ù–û–°–¢–ò:**\n"
    last_period = list(periods_ratios.keys())[-1]
    if last_period in periods_ratios:
        last_ratios = periods_ratios[last_period]
        if '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏' in last_ratios:
            cr = last_ratios['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏']
            if cr < 1.5:
                report += "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –æ–±—ä–µ–º –æ–±–æ—Ä–æ—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤\n"
                report += "‚Ä¢ –°–æ–∫—Ä–∞—Ç–∏—Ç—å –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞\n"
                report += "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏\n"
            else:
                report += "‚Ä¢ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å\n"
    
    return report

def generate_profitability_analysis_report(periods_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏"""
    report = "üíé **–ê–ù–ê–õ–ò–ó –†–ï–ù–¢–ê–ë–ï–õ–¨–ù–û–°–¢–ò**\n\n"
    
    periods_ratios = {}
    for period, data in periods_data.items():
        if data:
            periods_ratios[period] = calculate_financial_ratios_for_period(data)
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
    profitability_ratios = ['–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ (ROS)', '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ (ROA)', '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–ø–∏—Ç–∞–ª–∞ (ROE)', '–í–∞–ª–æ–≤–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å']
    
    for ratio_name in profitability_ratios:
        ratio_values = []
        for period, ratios in periods_ratios.items():
            if ratio_name in ratios:
                ratio_values.append((period, ratios[ratio_name]))
        
        if ratio_values:
            report += f"**{ratio_name}:**\n"
            for period, value in ratio_values:
                report += f"‚Ä¢ {period}: {value:.1f}%\n"
                
                # –û—Ü–µ–Ω–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è
                if 'ROA' in ratio_name or 'ROE' in ratio_name:
                    if value >= 15:
                        report += "  üöÄ –í—ã—Å–æ–∫–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å\n"
                    elif value >= 8:
                        report += "  ‚úÖ –•–æ—Ä–æ—à–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å\n"
                    elif value >= 5:
                        report += "  ‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å\n"
                    else:
                        report += "  ‚ùå –ù–∏–∑–∫–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å\n"
                elif 'ROS' in ratio_name:
                    if value >= 10:
                        report += "  üöÄ –í—ã—Å–æ–∫–∞—è –º–∞—Ä–∂–∞\n"
                    elif value >= 5:
                        report += "  ‚úÖ –•–æ—Ä–æ—à–∞—è –º–∞—Ä–∂–∞\n"
                    else:
                        report += "  ‚ö†Ô∏è –ù–∏–∑–∫–∞—è –º–∞—Ä–∂–∞\n"
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
            if len(ratio_values) >= 2:
                first_val = ratio_values[0][1]
                last_val = ratio_values[-1][1]
                change = last_val - first_val
                if change > 1:
                    report += f"  üìà –†–æ—Å—Ç +{change:.1f}–ø.–ø.\n"
                elif change < -1:
                    report += f"  üìâ –°–ø–∞–¥ {change:.1f}–ø.–ø.\n"
            
            report += "\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
    report += "üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –†–ï–ù–¢–ê–ë–ï–õ–¨–ù–û–°–¢–ò:**\n"
    last_period = list(periods_ratios.keys())[-1]
    if last_period in periods_ratios:
        last_ratios = periods_ratios[last_period]
        if '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ (ROS)' in last_ratios:
            ros = last_ratios['–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ (ROS)']
            if ros < 10:
                report += "‚Ä¢ –ü–æ–≤—ã—Å–∏—Ç—å —Ü–µ–Ω—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏\n"
                report += "‚Ä¢ –°–Ω–∏–∑–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂\n"
                report += "‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã\n"
    
    return report

def generate_stability_analysis_report(periods_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"""
    report = "üèõÔ∏è **–ê–ù–ê–õ–ò–ó –§–ò–ù–ê–ù–°–û–í–û–ô –£–°–¢–û–ô–ß–ò–í–û–°–¢–ò**\n\n"
    
    periods_ratios = {}
    for period, data in periods_data.items():
        if data:
            periods_ratios[period] = calculate_financial_ratios_for_period(data)
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    stability_ratios = ['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–≤—Ç–æ–Ω–æ–º–∏–∏', '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ª–µ–≤–µ—Ä–∏–¥–∂–∞']
    
    for ratio_name in stability_ratios:
        ratio_values = []
        for period, ratios in periods_ratios.items():
            if ratio_name in ratios:
                ratio_values.append((period, ratios[ratio_name]))
        
        if ratio_values:
            report += f"**{ratio_name}:**\n"
            for period, value in ratio_values:
                if ratio_name == '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–≤—Ç–æ–Ω–æ–º–∏–∏':
                    report += f"‚Ä¢ {period}: {value:.2f}\n"
                    if value >= 0.5:
                        report += "  ‚úÖ –í—ã—Å–æ–∫–∞—è –∞–≤—Ç–æ–Ω–æ–º–∏—è\n"
                    elif value >= 0.3:
                        report += "  ‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –∞–≤—Ç–æ–Ω–æ–º–∏—è\n"
                    else:
                        report += "  ‚ùå –ù–∏–∑–∫–∞—è –∞–≤—Ç–æ–Ω–æ–º–∏—è\n"
                else:  # –õ–µ–≤–µ—Ä–∏–¥–∂
                    report += f"‚Ä¢ {period}: {value:.2f}\n"
                    if value <= 1.0:
                        report += "  ‚úÖ –ù–∏–∑–∫–∏–π –ª–µ–≤–µ—Ä–∏–¥–∂\n"
                    elif value <= 2.0:
                        report += "  ‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π –ª–µ–≤–µ—Ä–∏–¥–∂\n"
                    else:
                        report += "  ‚ùå –í—ã—Å–æ–∫–∏–π –ª–µ–≤–µ—Ä–∏–¥–∂\n"
            
            report += "\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    report += "üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–°–¢–û–ô–ß–ò–í–û–°–¢–ò:**\n"
    last_period = list(periods_ratios.keys())[-1]
    if last_period in periods_ratios:
        last_ratios = periods_ratios[last_period]
        if '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–≤—Ç–æ–Ω–æ–º–∏–∏' in last_ratios:
            autonomy = last_ratios['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–≤—Ç–æ–Ω–æ–º–∏–∏']
            if autonomy < 0.5:
                report += "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª\n"
                report += "‚Ä¢ –†–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å\n"
                report += "‚Ä¢ –°–æ–∫—Ä–∞—Ç–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∑–∞–µ–º–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤\n"
    
    return report

def generate_forecast_report(periods_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏"""
    report = "üîÆ **–ü–†–û–ì–ù–û–ó –§–ò–ù–ê–ù–°–û–í–´–• –¢–ï–ù–î–ï–ù–¶–ò–ô**\n\n"
    
    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    key_indicators = ['–≤—ã—Ä—É—á–∫–∞', '—á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', '–∞–∫—Ç–∏–≤—ã –≤—Å–µ–≥–æ', '–∫–∞–ø–∏—Ç–∞–ª']
    
    for indicator in key_indicators:
        values = []
        periods_list = []
        
        for period, data in periods_data.items():
            if data and indicator in data:
                values.append(data[indicator])
                periods_list.append(period)
        
        if len(values) >= 2:
            # –ü—Ä–æ—Å—Ç–æ–π –ª–∏–Ω–µ–π–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
            growth_rate = (values[-1] - values[0]) / values[0] if values[0] != 0 else 0
            forecast_value = values[-1] * (1 + growth_rate)
            
            report += f"üìà **{indicator.title()}:**\n"
            report += f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç: {growth_rate*100:+.1f}%\n"
            report += f"‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥. –ø–µ—Ä–∏–æ–¥: {forecast_value:,.0f} —Ä—É–±.\n"
            
            if growth_rate > 0.1:
                report += "‚Ä¢ üöÄ –í—ã—Å–æ–∫–∏–µ —Ç–µ–º–ø—ã —Ä–æ—Å—Ç–∞\n"
            elif growth_rate > 0.05:
                report += "‚Ä¢ üìà –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç\n"
            elif growth_rate > 0:
                report += "‚Ä¢ ‚ö†Ô∏è –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç\n"
            else:
                report += "‚Ä¢ üìâ –°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è\n"
            
            report += "\n"
    
    # –ü—Ä–æ–≥–Ω–æ–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    report += "üìä **–ü–†–û–ì–ù–û–ó –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í:**\n\n"
    
    periods_ratios = {}
    for period, data in periods_data.items():
        if data:
            periods_ratios[period] = calculate_financial_ratios_for_period(data)
    
    key_ratios = ['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏', '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ (ROS)', '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–≤—Ç–æ–Ω–æ–º–∏–∏']
    
    for ratio_name in key_ratios:
        ratio_values = []
        for period, ratios in periods_ratios.items():
            if ratio_name in ratios:
                ratio_values.append(ratios[ratio_name])
        
        if len(ratio_values) >= 2:
            current_value = ratio_values[-1]
            avg_growth = (ratio_values[-1] - ratio_values[0]) / len(ratio_values) if len(ratio_values) > 1 else 0
            
            if ratio_name == '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂ (ROS)':
                forecast_value = current_value + avg_growth
                report += f"**{ratio_name}:** {current_value:.1f}% ‚Üí –ø—Ä–æ–≥–Ω–æ–∑: {forecast_value:.1f}%\n"
            else:
                forecast_value = current_value + avg_growth
                report += f"**{ratio_name}:** {current_value:.2f} ‚Üí –ø—Ä–æ–≥–Ω–æ–∑: {forecast_value:.2f}\n"
            
            report += "\n"
    
    # –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    report += "üí° **–°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**\n"
    
    # –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞
    revenue_values = []
    for period, data in periods_data.items():
        if data and '–≤—ã—Ä—É—á–∫–∞' in data:
            revenue_values.append(data['–≤—ã—Ä—É—á–∫–∞'])
    
    if len(revenue_values) >= 2:
        overall_growth = (revenue_values[-1] - revenue_values[0]) / revenue_values[0] if revenue_values[0] != 0 else 0
        
        if overall_growth > 0.15:
            report += "‚Ä¢ üöÄ –ö–æ–º–ø–∞–Ω–∏—è –≤ —Å—Ç–∞–¥–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞\n"
            report += "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        elif overall_growth > 0.05:
            report += "‚Ä¢ üìà –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –±–∏–∑–Ω–µ—Å–∞\n"
            report += "‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é\n"
        else:
            report += "‚Ä¢ ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏\n"
            report += "‚Ä¢ –ò—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–æ—Å—Ç–∞\n"
    
    return report

def generate_selective_analysis_report(periods_data, selected_groups):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    report = f"üéØ **–í–´–ë–û–†–û–ß–ù–´–ô –ê–ù–ê–õ–ò–ó**\n\n"
    report += f"üìã **–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:** {', '.join(selected_groups)}\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
    for group in selected_groups:
        report += f"üìä **{group.upper()}:**\n"
        indicators = INDICATOR_GROUPS.get(group, [])
        
        for indicator in indicators:
            values = []
            for period, data in periods_data.items():
                if data and indicator in data:
                    values.append((period, data[indicator]))
            
            if values:
                report += f"‚Ä¢ {indicator.title()}:\n"
                for period, value in values:
                    report += f"  {period}: {value:,.0f} —Ä—É–±.\n"
                
                # –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏
                if len(values) >= 2:
                    first_val = values[0][1]
                    last_val = values[-1][1]
                    change_abs = last_val - first_val
                    change_rel = ((last_val - first_val) / first_val * 100) if first_val != 0 else 0
                    trend = "üìà" if change_rel > 0 else "üìâ" if change_rel < 0 else "‚û°Ô∏è"
                    report += f"  {trend} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_abs:+,.0f} —Ä—É–±. ({change_rel:+.1f}%)\n"
                
                report += "\n"
    
    return report

def generate_industry_comparison_report(ratios, industry_data, period):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º–∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏"""
    report = f"üè≠ **–°–†–ê–í–ù–ï–ù–ò–ï –° –û–¢–†–ê–°–õ–ï–í–´–ú–ò –ù–û–†–ú–ê–¢–ò–í–ê–ú–ò**\n\n"
    report += f"üìä –û—Ç—Ä–∞—Å–ª—å: **{industry_data['name']}**\n"
    report += f"üìÖ –ü–µ—Ä–∏–æ–¥: {period}\n\n"
    
    standards = industry_data['standards']
    
    for ratio_name, (min_std, max_std) in standards.items():
        if ratio_name in ratios:
            value = ratios[ratio_name]
            report += f"**{ratio_name}:** {value:.2f}\n"
            
            if value < min_std:
                report += f"‚ùå **–ù–ò–ñ–ï –ù–û–†–ú–´** (–Ω–æ—Ä–º–∞: {min_std:.1f}-{max_std:.1f})\n"
                if ratio_name == '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏':
                    report += "   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É–≤–µ–ª–∏—á–∏—Ç—å –æ–±–æ—Ä–æ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã\n"
                elif '—Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å' in ratio_name.lower():
                    report += "   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã\n"
            elif value > max_std:
                report += f"‚ö†Ô∏è **–í–´–®–ï –ù–û–†–ú–´** (–Ω–æ—Ä–º–∞: {min_std:.1f}-{max_std:.1f})\n"
                if ratio_name == '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏':
                    report += "   üí° –í–æ–∑–º–æ–∂–Ω–æ –∏–∑–±—ã—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å\n"
            else:
                report += f"‚úÖ **–í –ù–û–†–ú–ï** (–Ω–æ—Ä–º–∞: {min_std:.1f}-{max_std:.1f})\n"
            
            report += "\n"
        else:
            report += f"**{ratio_name}:** ‚ùå –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    matching_standards = sum(1 for ratio_name in standards if ratio_name in ratios and 
                           min_std <= ratios[ratio_name] <= max_std)
    total_comparable = sum(1 for ratio_name in standards if ratio_name in ratios)
    
    if total_comparable > 0:
        compliance_rate = (matching_standards / total_comparable) * 100
        report += f"üìà **–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ù–û–†–ú–ê–¢–ò–í–ê–ú:** {compliance_rate:.1f}%\n\n"
        
        if compliance_rate >= 80:
            report += "üéâ **–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ** –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º!\n"
        elif compliance_rate >= 60:
            report += "‚úÖ **–•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ** –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤\n"
        elif compliance_rate >= 40:
            report += "‚ö†Ô∏è **–°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ**, –µ—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è\n"
        else:
            report += "‚ùå **–ù–∏–∑–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ**, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è\n"
    
    return report

# === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–ó–ê ===

async def perform_full_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    user_id = update.message.from_user.id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ —Ñ–∞–π–ª–æ–≤–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É
    if not load_user_data_with_fallback(context, user_id):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏")
        return
    
    await update.message.reply_text("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–ª–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑...")
    
    periods_data = context.user_data['periods_data']
    report = generate_period_analysis_report(periods_data)
    
    context.user_data['last_analysis'] = report
    context.user_data['analysis_type'] = "–ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
    
    if len(report) > 4000:
        parts = [report[i:i+4000] for i in range(0, len(report), 4000)]
        for part in parts:
            await update.message.reply_text(part)
    else:
        await update.message.reply_text(report)
    
    await update.message.reply_text("‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

async def perform_liquidity_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
    user_id = update.message.from_user.id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ —Ñ–∞–π–ª–æ–≤–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É
    if not load_user_data_with_fallback(context, user_id):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏")
        return
    
    await update.message.reply_text("üíß –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å...")
    
    periods_data = context.user_data['periods_data']
    report = generate_liquidity_analysis_report(periods_data)
    
    context.user_data['last_analysis'] = report
    context.user_data['analysis_type'] = "–∞–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"
    
    await update.message.reply_text(report)

async def perform_profitability_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏"""
    user_id = update.message.from_user.id
    
    if not load_user_data_with_fallback(context, user_id):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏")
        return
    
    await update.message.reply_text("üíé –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å...")
    
    periods_data = context.user_data['periods_data']
    report = generate_profitability_analysis_report(periods_data)
    
    context.user_data['last_analysis'] = report
    context.user_data['analysis_type'] = "–∞–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏"
    
    await update.message.reply_text(report)

async def perform_stability_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"""
    user_id = update.message.from_user.id
    
    if not load_user_data_with_fallback(context, user_id):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏")
        return
    
    await update.message.reply_text("üèõÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å...")
    
    periods_data = context.user_data['periods_data']
    report = generate_stability_analysis_report(periods_data)
    
    context.user_data['last_analysis'] = report
    context.user_data['analysis_type'] = "–∞–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"
    
    await update.message.reply_text(report)

async def perform_forecast_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π"""
    user_id = update.message.from_user.id
    
    if not load_user_data_with_fallback(context, user_id):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏")
        return
    
    await update.message.reply_text("üîÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∏ —Å—Ç—Ä–æ—é –ø—Ä–æ–≥–Ω–æ–∑...")
    
    periods_data = context.user_data['periods_data']
    report = generate_forecast_report(periods_data)
    
    context.user_data['last_analysis'] = report
    context.user_data['analysis_type'] = "–ø—Ä–æ–≥–Ω–æ–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π"
    
    await update.message.reply_text(report)

# === –§–£–ù–ö–¶–ò–ò –í–´–ë–û–†–û–ß–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê ===

async def selective_analysis_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    user_id = update.message.from_user.id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ —Ñ–∞–π–ª–æ–≤–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É
    if not load_user_data_with_fallback(context, user_id):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏")
        return
    
    keyboard = [
        [KeyboardButton("–í—ã—Ä—É—á–∫–∞ –∏ –ø—Ä–∏–±—ã–ª—å"), KeyboardButton("–ê–∫—Ç–∏–≤—ã –∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞")],
        [KeyboardButton("–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å"), KeyboardButton("–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å")],
        [KeyboardButton("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"), KeyboardButton("–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å")],
        [KeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å –≤—ã–±–æ—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    context.user_data['selected_groups'] = set()
    
    await update.message.reply_text(
        "üéØ **–í–´–ë–û–†–û–ß–ù–´–ô –ê–ù–ê–õ–ò–ó**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n"
        "‚Ä¢ üìà –í—ã—Ä—É—á–∫–∞ –∏ –ø—Ä–∏–±—ã–ª—å - –¥–∏–Ω–∞–º–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤\n"
        "‚Ä¢ üíº –ê–∫—Ç–∏–≤—ã –∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–ª–∞–Ω—Å–∞\n"
        "‚Ä¢ üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å - –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ üíé –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ üèõÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å - —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ üìä –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å - –¥–µ–ª–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n"
        "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –≤—ã–±–æ—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑'",
        reply_markup=reply_markup
    )
    return SELECT_INDICATORS

async def handle_indicator_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
    selected_group = update.message.text
    selected_groups = context.user_data.get('selected_groups', set())
    
    if selected_group in selected_groups:
        selected_groups.remove(selected_group)
        status = "‚ùå –£–±—Ä–∞–Ω–æ"
    else:
        selected_groups.add(selected_group)
        status = "‚úÖ –í—ã–±—Ä–∞–Ω–æ"
    
    context.user_data['selected_groups'] = selected_groups
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
    keyboard = [
        [KeyboardButton(f"{'‚úÖ ' if '–í—ã—Ä—É—á–∫–∞ –∏ –ø—Ä–∏–±—ã–ª—å' in selected_groups else ''}–í—ã—Ä—É—á–∫–∞ –∏ –ø—Ä–∏–±—ã–ª—å"), 
         KeyboardButton(f"{'‚úÖ ' if '–ê–∫—Ç–∏–≤—ã –∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞' in selected_groups else ''}–ê–∫—Ç–∏–≤—ã –∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞")],
        [KeyboardButton(f"{'‚úÖ ' if '–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å' in selected_groups else ''}–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å"), 
         KeyboardButton(f"{'‚úÖ ' if '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å' in selected_groups else ''}–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å")],
        [KeyboardButton(f"{'‚úÖ ' if '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å' in selected_groups else ''}–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"), 
         KeyboardButton(f"{'‚úÖ ' if '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å' in selected_groups else ''}–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å")],
        [KeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å –≤—ã–±–æ—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    groups_list = "\n".join([f"‚Ä¢ {group}" for group in selected_groups]) if selected_groups else "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ"
    
    await update.message.reply_text(
        f"üéØ **–í—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø: {len(selected_groups)}**\n\n"
        f"{groups_list}\n\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {selected_group} - {status}",
        reply_markup=reply_markup
    )
    return SELECT_INDICATORS

async def start_selective_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    selected_groups = context.user_data.get('selected_groups', set())
    
    if not selected_groups:
        await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
        return SELECT_INDICATORS
    
    await update.message.reply_text("üîç –í—ã–ø–æ–ª–Ω—è—é –≤—ã–±–æ—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
    
    periods_data = context.user_data['periods_data']
    analysis_type = "–≤—ã–±–æ—Ä–æ—á–Ω—ã–π"
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
    filtered_periods_data = {}
    for period, data in periods_data.items():
        filtered_data = {}
        for group in selected_groups:
            indicators = INDICATOR_GROUPS.get(group, [])
            for indicator in indicators:
                if indicator in data:
                    filtered_data[indicator] = data[indicator]
        filtered_periods_data[period] = filtered_data
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = generate_selective_analysis_report(filtered_periods_data, selected_groups)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ TXT
    context.user_data['last_analysis'] = report
    context.user_data['analysis_type'] = analysis_type
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    if len(report) > 4000:
        parts = [report[i:i+4000] for i in range(0, len(report), 4000)]
        for part in parts:
            await update.message.reply_text(part)
    else:
        await update.message.reply_text(report)
    
    await update.message.reply_text("‚úÖ –í—ã–±–æ—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    await start(update, context)
    return ConversationHandler.END

# === –§–£–ù–ö–¶–ò–ò –°–†–ê–í–ù–ï–ù–ò–Ø –° –ù–û–†–ú–ê–¢–ò–í–ê–ú–ò ===

async def industry_comparison_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º–∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏"""
    user_id = update.message.from_user.id
    
    if not load_user_data_with_fallback(context, user_id):
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏")
        return
    
    keyboard = [
        [KeyboardButton("–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"), KeyboardButton("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")],
        [KeyboardButton("–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üè≠ **–°–†–ê–í–ù–ï–ù–ò–ï –° –û–¢–†–ê–°–õ–ï–í–´–ú–ò –ù–û–†–ú–ê–¢–ò–í–ê–ú–ò**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:\n\n"
        "‚Ä¢ üõí –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è\n"
        "‚Ä¢ üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ\n"
        "‚Ä¢ üíº –°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥\n\n"
        "–ë–æ—Ç —Å—Ä–∞–≤–Ω–∏—Ç –≤–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–º–∏ benchmarks",
        reply_markup=reply_markup
    )
    return SELECT_INDUSTRY

async def handle_industry_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç—Ä–∞—Å–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    industry_map = {
        "–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è": "retail",
        "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ": "manufacturing", 
        "–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥": "services"
    }
    
    selected_industry = industry_map.get(update.message.text)
    if not selected_industry:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return SELECT_INDUSTRY
    
    await update.message.reply_text(f"üîç –°—Ä–∞–≤–Ω–∏–≤–∞—é —Å –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏ –¥–ª—è {update.message.text}...")
    
    periods_data = context.user_data['periods_data']
    industry_data = INDUSTRY_STANDARDS[selected_industry]
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    last_period = list(periods_data.keys())[-1]
    last_data = periods_data[last_period]
    ratios = calculate_financial_ratios_for_period(last_data)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    report = generate_industry_comparison_report(ratios, industry_data, last_period)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è TXT
    context.user_data['last_analysis'] = report
    context.user_data['analysis_type'] = f"—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å {industry_data['name']}"
    
    await update.message.reply_text(report)
    await start(update, context)
    return ConversationHandler.END

# === –§–£–ù–ö–¶–ò–Ø –≠–ö–°–ü–û–†–¢–ê –í TXT ===

async def export_to_txt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ TXT —Ñ–∞–π–ª"""
    if 'last_analysis' not in context.user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    await update.message.reply_text("üìÑ –°–æ–∑–¥–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç...")
    
    try:
        analysis_text = context.user_data['last_analysis']
        analysis_type = context.user_data.get('analysis_type', '–ê–Ω–∞–ª–∏–∑')
        
        # –°–æ–∑–¥–∞–µ–º TXT —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        buffer = io.BytesIO()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = f"–§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó - {analysis_type.upper()}\n"
        header += "=" * 50 + "\n"
        header += f"–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±—É—Ñ–µ—Ä
        buffer.write(header.encode('utf-8'))
        buffer.write(analysis_text.encode('utf-8'))
        
        buffer.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await update.message.reply_document(
            document=buffer,
            filename=f'—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π_–∞–Ω–∞–ª–∏–∑_{datetime.now().strftime("%Y%m%d_%H%M")}.txt',
            caption=f'üìä –í–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ ({analysis_type}) –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ'
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ===

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–æ–∫"""
    text = update.message.text
    
    if text == "üìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        await perform_full_analysis(update, context)
    elif text == "üéØ –í—ã–±–æ—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        await selective_analysis_start(update, context)
    elif text == "üìà –ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏":
        await perform_liquidity_analysis(update, context)
    elif text == "üíé –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏":
        await perform_profitability_analysis(update, context)
    elif text == "üèõÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å":
        await perform_stability_analysis(update, context)
    elif text == "üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏":
        await industry_comparison_start(update, context)
    elif text == "üîÆ –ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π":
        await perform_forecast_analysis(update, context)
    elif text == "üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT":
        await export_to_txt(update, context)
    elif text == "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
        await update.message.reply_text("üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é")
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)

def setup_application():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("template", template_command))
    application.add_handler(CommandHandler("sample", sample_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (Excel —Ñ–∞–π–ª–æ–≤)
    application.add_handler(MessageHandler(filters.Document.ALL, receive_document))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # ConversationHandler –¥–ª—è –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    selective_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^(üéØ –í—ã–±–æ—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑)$"), selective_analysis_start)],
        states={
            SELECT_INDICATORS: [
                MessageHandler(filters.Regex("^(–í—ã—Ä—É—á–∫–∞ –∏ –ø—Ä–∏–±—ã–ª—å|–ê–∫—Ç–∏–≤—ã –∏ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞|–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å|–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å|–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å|–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å)$"), 
                             handle_indicator_selection),
                MessageHandler(filters.Regex("^(‚úÖ –ù–∞—á–∞—Ç—å –≤—ã–±–æ—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑)$"), start_selective_analysis),
                MessageHandler(filters.Regex("^(üîô –ù–∞–∑–∞–¥)$"), start)
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("^(üîô –ù–∞–∑–∞–¥)$"), start)]
    )
    application.add_handler(selective_conv_handler)
    
    # ConversationHandler –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏
    industry_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^(üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏)$"), industry_comparison_start)],
        states={
            SELECT_INDUSTRY: [
                MessageHandler(filters.Regex("^(–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è|–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ|–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥)$"), handle_industry_selection),
                MessageHandler(filters.Regex("^(üîô –ù–∞–∑–∞–¥)$"), start)
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("^(üîô –ù–∞–∑–∞–¥)$"), start)]
    )
    application.add_handler(industry_conv_handler)
    
    return application

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = setup_application()
    
    print("‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ô –ë–£–•–ì–ê–õ–¢–ï–†–°–ö–ò–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ó–ê–ü–£–©–ï–ù!")
    print("üéØ –î–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏:")
    print("   ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é")
    print("   ‚Ä¢ –í—ã–±–æ—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑") 
    print("   ‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏")
    print("   ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π")
    print("   ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT")
    print("   ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã")
    print("   ‚Ä¢ –ü–æ–ª–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
    print("üåê –†–µ–∂–∏–º: POLLING")
    print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    await application.run_polling()

# === –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
if __name__ == '__main__':
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é main —Ñ—É–Ω–∫—Ü–∏—é
        asyncio.run(main())
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
